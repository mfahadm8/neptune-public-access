AWSTemplateFormatVersion: '2010-09-09'
Description: An AWS CloudFormation template describing your function.

Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Principal: 
              Service: 
                - "lambda.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Policies: 
        - PolicyName: "LambdaPolicy"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - Effect: "Allow"
                Action: 
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                  - "ec2:DescribeInstances"
                  - "ec2:CreateNetworkInterface"
                  - "ec2:AttachNetworkInterface"
                  - "ec2:DescribeNetworkInterfaces"
                  - "ec2:DeleteNetworkInterface"
                  - "rds:*"
                  - "neptune-db:*"
                  - "kms:ListAliases"
                  - "kms:ListKeyPolicies"
                  - "kms:ListKeys"
                  - "kms:ListRetirableGrants"
                  - "logs:DescribeLogStreams"
                  - "logs:GetLogEvents"
                  - "sns:ListSubscriptions"
                  - "sns:ListTopics"
                  - "sns:Publish"
                  - "cloudformation:DescribeStacks"
                  - "cloudformation:ListStackResources"
                  - "cloudwatch:ListMetrics"
                  - "cloudwatch:GetMetricData"
                  - "ec2:DescribeSecurityGroups"
                  - "ec2:DescribeSubnets"
                  - "ec2:DescribeVpcs"
                  - "iam:GetPolicy"
                  - "iam:GetPolicyVersion"
                  - "iam:GetRole"
                  - "iam:GetRolePolicy"
                  - "iam:ListAttachedRolePolicies"
                  - "iam:ListRolePolicies"
                  - "iam:ListRoles"
                  - "lambda:*"
                  - "logs:DescribeLogGroups"
                  - "states:DescribeStateMachine"
                  - "states:ListStateMachines"
                  - "tag:GetResources"
                  - "xray:GetTraceSummaries"
                  - "xray:BatchGetTraces"
                  - "iam:PassRole"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                  - "logs:FilterLogEvents"
                  - "logs:CreateLogGroup"
                Resource: "*"
              - Effect: "Allow"
                Action: 
                  - "iam:PassRole"
                Resource: "*"
                Condition: 
                  StringEquals: 
                    iam:PassedToService: 
                      - "lambda.amazonaws.com"
              - Effect: "Allow"
                Action: 
                  - "logs:CreateLogGroup"
                Resource: "arn:aws:logs:ap-southeast-2:337393854581:*"
              - Effect: "Allow"
                Action: 
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: 
                  - "arn:aws:logs:ap-southeast-2:337393854581:log-group:*"
  
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref CodeBucket
        S3Key: !Ref CodeKey
      Description: ''
      MemorySize: 128
      Timeout: 30 
      FunctionName: !Ref FunctionName
      Handler: index.handler
      Runtime: nodejs20.x
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          NEPTUNE_ENDPOINT: !Ref NeptuneEndpoint
      VpcConfig: 
        SecurityGroupIds: !If
          - AddVpc
          - [!Ref LambdaExecutionSecurityGroup]
          - !Ref "AWS::NoValue"
        SubnetIds: !If
          - AddVpc
          - !Ref SubnetIds
          - !Ref "AWS::NoValue"

  LambdaExecutionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: AddVpc
    Properties:
      GroupDescription: Enable Lambda access to Neptune
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

Parameters:
  FunctionName:
    Type: String
    Description: The name of the Lambda function.
  VpcId:
    Type: String
    Description: The VPC ID where the Lambda function should be deployed.
  SubnetIds:
    Type: CommaDelimitedList
    Description: The subnet IDs where the Lambda function should be deployed.
  NeptuneEndpoint:
    Type: String
    Description: The endpoint of the Neptune cluster.
  AddVpc:
    Type: String
    AllowedValues:
      - "true"
      - "false"
    Description: Whether to add VPC configuration to the Lambda function.
  CodeBucket:
    Type: String
    Description: The S3 bucket where the Lambda function code is stored.
  CodeKey:
    Type: String
    Description: The S3 key for the Lambda function code.

Conditions:
  AddVpc: !Equals [!Ref AddVpc, "true"]
